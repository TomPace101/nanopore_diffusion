
#Standard library
import os
import os.path as osp
import sys

#Site packages
from doit.tools import config_changed

#Local
from folderstructure import *
import buildgeom
import solver_general
import fickian_unhomog
import smol_unhomog

#Mapping from solver_general.ModelParameters.equation to the appropriate solver classes
#Each module implementing a solver should define a solverclasses dictionary, so we just need to put them all together
solverclasses={}
solverclasses.update(fickian_unhomog.solverclasses)
solverclasses.update(smol_unhomog.solverclasses)

def consolidate(entry_filelist,entrytype,nameattribute):
  """Load all objects from a list of files
  For each file in the list,
  this will load every document the file contains as an object of the specified type,
  and store all the objects from all the files in a single dictionary.
  Inputs:
    entry_filelist = list (or other iterable) of file paths
    entrytype = class to be used for each object
    nameattribute = attribute name in the entries providing their names
      These names are the keys in the output dictionaries.
  Returns:
    entries_byname = dictionary mapping an entry's name to the entry itself
    files_byname = dictionary mapping an entry's name to the file it came from."""
  entries_byname={}
  files_byname={}
  #For each listed file
  for infpath in entry_filelist:
    #Get an iterable over the objects defined in this file
    entry_iter=entrytype.all_from_yaml(infpath)
    #For each object in this file
    for entry in entry_iter:
      if entry is not None:
        #Get its name
        objname=getattr(entry,nameattribute)
        #Do we already have one by that name?
        assert objname not in entries_byname, "Duplicate %s name: %s in both %s and %s"%(entrytype.__name__,objname,files_byname[objname],infpath)
        #Add entry to dictionaries
        files_byname[objname]=infpath
        entries_byname[objname]=entry
  return entries_byname, files_byname

def ListMeshParamsFiles(modelparams_list):
  """Get a list of all mesh parameters files from the models
  Arguments:
    modelparams_list: list (or other iterable) of ModelParameters objects
  Returns:
    meshparams_filelist = list of mesh parameters filenames, including folder path"""
  meshparams_filelist = []
  for modelparams in modelparams_list:
    if not modelparams.meshparamsfile in meshparams_filelist:
      meshparams_filelist.append(modelparams.meshparamsfile)
  meshparams_filelist=[osp.join(params_mesh_folder,m) for m in meshparams_filelist]
  return meshparams_filelist

def GetAllModelsAndMeshes(modelparams_filelist):
  """Read in all the models and meshes
  Arguments:
    modelparams_filelist = list of model parameters files, full paths, as strings
  Return values:
    allmodels = Dictionary of all ModelParameters objects, by modelname
    modelfiles = Dictionary of yaml file for ModelParameters objects, by modelname
    allmeshses = Dictionary of all MeshParameters objects, by meshname
    meshfiles = Dictionary of yaml files for MeshParameters objects, by meshname"""
  #Get all the models from all the model parameter files
  allmodels, modelfiles = consolidate(modelparams_filelist,solver_general.ModelParameters,'modelname')
  #Get a list of all mesh parameters files from the models
  meshparams_filelist = ListMeshParamsFiles(allmodels.values())
  #Get all the meshes from all the mesh parameter files
  allmeshes, meshfiles = consolidate(meshparams_filelist,buildgeom.MeshParameters,'meshname')
  return allmodels,modelfiles,allmeshes,meshfiles

def list_outputfiles(cmdlist):
  """Get a list of all the files generated by the data extraction commands.
  The info.yaml file is included as well.
  Arguments:
    cmdlist = list of data extraction commands,
      each command consists of pair (cmdname, arguments):
        cmdname = name of data extraction method of the solver class
        arguments = dictionary of all arguments needed by the extraction method
  Return:
    outfiles = list of generated output files (names only, not including their folder)"""
  #Currently, we assume all files can only come from the 'filename' argument
  filearg_list=['filename']
  outfiles=['info.yaml']
  for cmdname, arguments in cmdlist:
    #Check all possible arguments that could contain the name of an output file
    present_args=[n for n in filearg_list if n in arguments.keys()]
    outfiles.extend([arguments[n] for n in present_args])
  return outfiles

def dosolve(modelparams,meshparams):
  assert modelparams.equation in solverclasses.keys(), "Unrecognized equation: %s"%modelparams.equation
  solver_class=solverclasses[modelparams.equation]
  solver_codefile=sys.modules[solver_class.__module__].__file__
  xmlfiles = [x for x in solver_general.List_Mesh_Input_Files(modelparams.meshname,meshparams.basename)]
  outdir=osp.join(solnfolder,modelparams.basename,modelparams.modelname)
  outfiles=list_outputfiles(modelparams.dataextraction)
  outpaths=[osp.join(outdir,f) for f in outfiles]
  tdef = {'name':modelparams.modelname,
          'file_dep':[solver_general.__file__,osp.join(srcfolder,solver_codefile)]+xmlfiles, #This takes care of dependency on mesh
          'uptodate':[config_changed(modelparams.to_dict())], #Mesh dependency already taken care of in file_dep
          'targets':outpaths,
          'actions':[(solver_class.complete,(modelparams,meshparams),{'diskwrite':True,'as_action':True})]}
  return tdef