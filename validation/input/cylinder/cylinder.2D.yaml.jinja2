%YAML 1.2
---
#First, set the data folder so we know where to find input and output files
- !SetDataFolder
  datafolder: ../../../ #Data folder path relative to the location of this yaml file, unless absolute path provided
#Locator for input and output generated below
- !UpdateFolderStructure
  InputFile: ['input',0]
  OutputFile: ['output',0]
  OutFile2: ['output',0,1,2]
  CompareFile: ['comparison',0]

{% for id,r in r_list %}
#-------------------------------------------------------------------------------
#id={{id}}, r={{r}}
#Obstructive Inclusion
#Mesh Generation
- !TemplateFileRequest
  name: cylinder.2D.obs.{{id}}.geo
  tmplfile: !InputFile cylinder.geo.jinja2
  outfile: !OutFile2 cylinder-obs.{{id}}.geo
  data:
    r: {{r}}
    mcar1: 0.01
    mcar2: 0.005
    fill_cylinder: False
    make_3D: False
- !GmshRequest
  name: cylinder.2D.obs.{{id}}.gmsh
  geofile: !OutFile2 cylinder-obs.{{id}}.geo
  mshfile: !OutFile2 cylinder-obs.{{id}}.msh
  gmsh_outfile: !OutFile2 cylinder-obs.gmsh.{{id}}.txt
  meshmetafile: !OutFile2 cylinder-obs.gmsh.{{id}}.yaml
- !DolfinConvertRequest
  name: cylinder.2D.obs.{{id}}.dconv
  mshfile: !OutFile2 cylinder-obs.{{id}}.msh
  mesh_xml: !OutFile2 cylinder-obs.{{id}}.xml
  dconv_outfile: !OutFile2 cylinder-obs.dconv.{{id}}.txt
- !HDF5ConvertRequest
  name: cylinder.2D.obs.{{id}}.hdf5conv
  mesh_xml: !OutFile2 cylinder-obs.{{id}}.xml
  mesh_hdf5file: !OutFile2 cylinder-obs.{{id}}.hdf5
#Simulation
- !HomogFickianSimulator
  name: cylinder.2D.obs.{{id}}.homog
  mesh: !OutFile2 cylinder-obs.{{id}}.hdf5
  meshmeta: !OutFile2 cylinder-obs.gmsh.{{id}}.yaml
  metadata:
    cell_volume: 1.0
    potential: full obstruction
  conditions:
    elementorder: 3
    boundaries: [1, 2, 3, 4]
  loaddata:
    - [setconstant, {attrpath: D, constval: 1.0}]
  dataextraction:
    - [domain_volume, {attrpath: domain_volume}]
    - [macroscale_diffusion, {volpath: metadata.cell_volume}]
    - - reportvalues
      - outfpath: !OutFile2 results.{{id}}.yaml
        mapping:
          r: meshinfo.metadata.r
          cell_volume: metadata.cell_volume
          domain_volume: domain_volume
          D_macro: D_macro
          potential: metadata.potential
{% do collection_files.append('output/cylinder/2D/obs/results.'+id+'.yaml') %}
#Inclusion as Potential
#Mesh Generation
- !TemplateFileRequest
  name: cylinder.2D.pot.{{id}}.geo
  tmplfile: !InputFile cylinder.geo.jinja2
  outfile: !OutFile2 cylinder-pot.{{id}}.geo
  data:
    r: {{r}}
    mcar1: 0.05
    mcar2: 0.025
    fill_cylinder: True
    make_3D: False
- !GmshRequest
  name: cylinder.2D.pot.{{id}}.gmsh
  geofile: !OutFile2 cylinder-pot.{{id}}.geo
  mshfile: !OutFile2 cylinder-pot.{{id}}.msh
  gmsh_outfile: !OutFile2 cylinder-pot.gmsh.{{id}}.txt
  meshmetafile: !OutFile2 cylinder-pot.gmsh.{{id}}.yaml
- !DolfinConvertRequest
  name: cylinder.2D.pot.{{id}}.dconv
  mshfile: !OutFile2 cylinder-pot.{{id}}.msh
  mesh_xml: !OutFile2 cylinder-pot.{{id}}.xml
  dconv_outfile: !OutFile2 cylinder-pot.dconv.{{id}}.txt
- !HDF5ConvertRequest
  name: cylinder.2D.pot.{{id}}.hdf5conv
  mesh_xml: !OutFile2 cylinder-pot.{{id}}.xml
  mesh_hdf5file: !OutFile2 cylinder-pot.{{id}}.hdf5
{% for subid,potval in pot_list %}
#potential={{potval}}
#Create spatial functions
- !ProjectionSimulator
  name: cylinder.2D.pot.spatial_func.{{id}}-{{subid}}.pot
  mesh: !OutFile2 cylinder-pot.{{id}}.hdf5
  meshmeta: !OutFile2 cylinder-pot.gmsh.{{id}}.yaml
  conditions:
    elementorder: 3
    functionname: potential
    functiontype: scalar
  loaddata:
    - [loadcellmapping, {attrpath: expr, mapping: {1: 0.0, 2: {{ potval -}} }}]
  dataextraction:
    - [writefield, {outfpath: !OutFile2 potential.{{id}}-{{subid}}.hdf5, outname: potential}]
    - [writefield, {outfpath: !OutFile2 potential.{{id}}-{{subid}}.pvd}]
#Simulation
- !HomogSmolSimulator
  name: cylinder.2D.pot.{{id}}-{{subid}}.homog
  mesh: !OutFile2 cylinder-pot.{{id}}.hdf5
  meshmeta: !OutFile2 cylinder-pot.gmsh.{{id}}.yaml
  metadata:
    cell_volume: 1.0
    potential: {{potval}}
  conditions:
    elementorder: 3
    boundaries: [1, 2, 3, 4]
    beta: 1.0
  loaddata:
    - [setconstant, {attrpath: D, constval: 1.0}]
    - [loadfield, {attrpath: potential, infpath: !OutFile2 potential.{{id}}-{{subid}}.hdf5, fieldtag: potential}]
  dataextraction:
    - [domain_volume, {attrpath: domain_volume}]
    - [macroscale_diffusion, {volpath: metadata.cell_volume}]
    # - [writefield, {outfpath: !OutFile2 Dbar.{{id}}.pvd, attrpath: Dbar}]
    - - reportvalues
      - outfpath: !OutFile2 results.{{id}}-{{subid}}.yaml
        mapping:
          r: meshinfo.metadata.r
          cell_volume: metadata.cell_volume
          domain_volume: domain_volume
          D_macro: D_macro
          potential: metadata.potential
{% do collection_files.append('output/cylinder/2D/pot/results.'+id+'-'+subid+'.yaml') %}
{% endfor %}
{% endfor %}

# Collection
- !RawCollectionRequest
  name: cylinder.collection
  outpath: !OutputFile results.pkl
  modules:
    - !InputFile calculations.py
  methods:
    - calc_porosity_column_byradius
    - calc_cylinder_hashin_shtrikman
  calculations:
    - [calc_porosity_column_byradius, {}]
    - [calc_cylinder_hashin_shtrikman, {}]
  definitions:
    - mapping:
        r: r
        cell_volume: cell_volume
        domain_volume: domain_volume
        D_xx: [D_macro,0,0]
        D_yy: [D_macro,1,1]
        D_xy: [D_macro,0,1]
        D_yx: [D_macro,1,0]
        potential: potential
      file_list:
{% for fpath in collection_files %}
        - !DataFile {{fpath}}
{% endfor %}

#Plot
- !FigureRequest
  name: cylinder.plot
  loadfiles:
    dframe: !OutputFile results.pkl
  prepcommands:
    - [series_from_dataframe, {dfpath: dframe, xcol: porosity, ycol: D_xx, outattr: dx_obs, label: "Fickian diffusion; full obstruction", query: "potential=='full obstruction'"}]
{% for subid,potval in pot_list %}
    - [series_from_dataframe, {dfpath: dframe, xcol: porosity, ycol: D_xx, outattr: dx_{{"%d"|format(potval)}}, label: "$\\beta\\psi={{"%d"|format(potval)}}$", query: "potential=={{potval}}"}]
{% endfor %}
    - [series_from_dataframe, {dfpath: dframe, xcol: porosity, ycol: upper_bound, outattr: hs_ub, label: "Hashin-Shtrikman upper bound", query: "potential=='full obstruction'"}]
  rcparams:
    figure.dpi: 300
    figure.autolayout: True
  figures:
    - !FigureProperties
      figsize: [5.5,4.5]
      outfpath: !OutputFile plot.png
  axes:
    - !AxesProperties
      xlabel:
        xlabel: '$\phi$'
        fontsize: 20
      ylabel:
        ylabel: '$D_{eff}/D_{bulk}$'
        fontsize: 20
      title:
        label: 'Diffusion Around a Regular Lattice of Cylinders'
        fontsize: 14
      xlim: [0,1]
      ylim: [0,1]
  series:
    - !SeriesProperties
      seriesattr: dx_obs
      fmt: "k."
{% for subid,potval in pot_list %}
    - !SeriesProperties
      seriesattr: dx_{{"%d"|format(potval)}}
      fmt: "c+"
{% endfor %}
    - !SeriesProperties
      seriesattr: hs_ub
      fmt: "r-"
  plotcommands:
    - [axmethod, {method: legend, loc: "upper left", numpoints: 1}]
