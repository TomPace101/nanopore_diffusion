%YAML 1.2
---
#You can include stuff that's not a request or other actionable item in here as data.
#You could, of course, use a yaml anchor to refer to this data later on.
#That makes this convenient for defining data you'll reuse a lot.
- This is just a string. You'll never see it in any of the output.
#Locator for input and output generated below
- !UpdateFolderStructure
  InputFile: ['input',0]
  OutputFile: ['output',0]
  CompareFile: ['comparison',0]
#Test basic shell request
- !DummyShellRequest
  name: dummy.shell
  test: hello world
  outfile: !OutputFile hello_world.txt
#Verify output of previous test
- !FileComparisonRequest
  name: dummy.shell.verify
  expected: !CompareFile hello_world.txt
  received: !OutputFile hello_world.txt
#Test general shell request
- !GeneralShellCommandRequest
  name: dummy.generalshell
  command: date
  outfile: !OutputFile date_output.txt
#Verify output of previous test
- !FileSizeComparisonRequest
  name: dummy.generalshell.verify
  expected: !CompareFile date_output.txt
  received: !OutputFile date_output.txt
  range: 0
#Test template request
- !TemplateFileRequest
  name: dummy.templatefile
  tmplfile: !InputFile hello_world.txt.jinja2
  outfile: !OutputFile hello_from_template.txt
  data:
    noun: world
#Verify output of previous test
- !FileComparisonRequest
  name: dummy.templatefile.verify
  expected: !CompareFile hello_from_template.txt
  received: !OutputFile hello_from_template.txt
#Test recursion depth
- !RequestFileRequest
  name: recursion.root
  requestfile: !InputFile recursion_a.yaml
#Verify output of previous test
- !FileComparisonRequest
  name: recursion.root.verify
  expected: !CompareFile recursion_c.txt
  received: !OutputFile recursion_c.txt
#Test customization of template request
- !TemplateFileRequest
  name: customization.template
  modules:
    - !InputFile template_example.py
  methods:
    - get_template_input
  initializations:
    template_example:
      y: 5
  extra:
    x: 7
  data:
    n: 1
  tmplfile: !InputFile tmpl.txt.jinja2
  outfile: !OutputFile out.txt
#Verify output of previous test
- !FileComparisonRequest
  name: customization.template.verify
  expected: !CompareFile out.txt
  received: !OutputFile out.txt
#Test parameteric generation of child requests
- !ParametricRequestListRequest
  name: parametric.debug
  request_type: DummyShellRequest
  constants:
    name: parametric.debug.child
    test: I am an only child.
    outfile: !OutputFile only_child.txt
#Verify output of previous test
- !FileComparisonRequest
  name: parametric.debug.verify
  expected: !CompareFile only_child.txt
  received: !OutputFile only_child.txt
#Test customized parameteric generation of child requests
- &example_parametric
  !ParametricRequestListRequest
  name: parametric.customized
  request_type: DummyShellRequest
  modules:
    - !InputFile complex_dummy.py
  methods:
    - get_child_kwargs
  constants:
    prefix: Hello, this is child number
  variations:
    x: [1,2]
    y: [1,2]
#Verify output of previous test
- !FileComparisonListRequest
  name: parametric.customized.verify
  pairs:
    - [!CompareFile child_000.txt, !OutputFile child_000.txt]
    - [!CompareFile child_001.txt, !OutputFile child_001.txt]
    - [!CompareFile child_002.txt, !OutputFile child_002.txt]
    - [!CompareFile child_003.txt, !OutputFile child_003.txt]
#Customization and use of another parent request to generate parametric requests
- !ParametricRequestListRequest
  name: parametric.with_other_parent
  request_type: DummyShellRequest
  modules:
    - !InputFile otherparent_test.py
  methods:
    - get_child_kwargs
  constants:
    prefix: Now this is child number
  variations:
    z: [1,2]
  other_parents:
    xy_request: *example_parametric
#Verify output of previous test
- !FileComparisonListRequest
  name: parametric.with_other_parent.verify
  pairs:
    - [!CompareFile zchild_000.txt, !OutputFile zchild_000.txt]
    - [!CompareFile zchild_001.txt, !OutputFile zchild_001.txt]
    - [!CompareFile zchild_002.txt, !OutputFile zchild_002.txt]
    - [!CompareFile zchild_003.txt, !OutputFile zchild_003.txt]
    - [!CompareFile zchild_004.txt, !OutputFile zchild_004.txt]
    - [!CompareFile zchild_005.txt, !OutputFile zchild_005.txt]
    - [!CompareFile zchild_006.txt, !OutputFile zchild_006.txt]
    - [!CompareFile zchild_007.txt, !OutputFile zchild_007.txt]
#Simultaneous requests
#Note that we can't actually check here to make sure they are simultaneous,
#just that they do execute.
- !SimultaneousRequestQueue
  name: simultaneous.dummy
  num_workers: 2
  delay: 1
  queue:
  - !DummyShellRequest
    name: simultaneous.dummy.1
    test: Request 1
    outfile: !OutputFile 1.txt
  - !DummyShellRequest
    name: simultaneous.dummy.2
    test: Request 2
    outfile: !OutputFile 2.txt
  - !DummyShellRequest
    name: simultaneous.dummy.3
    test: Request 3
    outfile: !OutputFile 3.txt
  - !DummyShellRequest
    name: simultaneous.dummy.4
    test: Request 4
    outfile: !OutputFile 4.txt
#Verify output of previous test
- !FileComparisonListRequest
  name: simultaneous.dummy.verify
  pairs:
    - [!CompareFile 1.txt, !OutputFile 1.txt]
    - [!CompareFile 2.txt, !OutputFile 2.txt]
    - [!CompareFile 3.txt, !OutputFile 3.txt]
    - [!CompareFile 4.txt, !OutputFile 4.txt]
#Request run through mpirun (requires mpirun)
#The shell append request won't overwrite any previous file, so we need to delete it first
- !FileDeletionRequest
  name: mpi.test.preclean
  files:
    - !OutputFile out.txt
- !MPIRunRequest
  name: mpi.test
  numproc: 2
  child:
    !DummyShellAppendRequest
    name: mpi.test.child
    outfile: !OutputFile out.txt
    test: I am a single request that was told to output this string.
#Verify output of previous test
- !FileComparisonRequest
  name: mpi.test.verify
  expected: !CompareFile out.txt
  received: !OutputFile out.txt
#Add a folder to the python path
- !PythonPathRequest
  name: pathrequest
  folders: [input/customization]
#Load a new yaml-loadable module
