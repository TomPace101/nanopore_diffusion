%YAML 1.2
---
#First, set the data folder so we know where to find input and output files
- !SetDataFolder
  datafolder: . #Data folder path relative to the location of this yaml file, unless absolute path provided
#Locator for input and output generated below
- !UpdateFolderStructure
  InputFile: ['input',0]
  OutputFile: ['output',0]
  CompareFile: ['comparison',0]

#Mesh Generation
- !TemplateFileRequest
  name: two_layer.geo
  tmplfile: !InputFile two_layer.geo.jinja2
  outfile: !OutputFile two_layer.geo
  data:
    alpha1: 0.5
    mcar1: 0.01
    mcar2: 0.005
- !GmshRequest
  name: two_layer.gmsh
  geofile: !OutputFile two_layer.geo
  mshfile: !OutputFile two_layer.msh
  gmsh_outfile: !OutputFile two_layer.gmsh.txt
  meshmetafile: !OutputFile two_layer.gmsh.yaml
- !DolfinConvertRequest
  name: two_layer.dconv
  mshfile: !OutputFile two_layer.msh
  mesh_xml: !OutputFile two_layer.xml
  dconv_outfile: !OutputFile two_layer.dconv.txt
- !HDF5ConvertRequest
  name: two_layer.hdf5conv
  mesh_xml: !OutputFile two_layer.xml
  mesh_hdf5file: !OutputFile two_layer.hdf5
#Create spatial function
- !CellMappingSimulator
  name: two_layer.spatial_func
  mesh: !OutputFile two_layer.hdf5
  meshmeta: !OutputFile two_layer.gmsh.yaml
  conditions:
    elementorder: 3
    functionname: spatial_D
    functiontype: scalar #matrix
    mapping:
      1: 1
        # - [1, 0]
        # - [0, 1]
      2: 2
        # - [2, 0]
        # - [0, 2]
  dataextraction:
    - [writefield, {outfpath: !OutputFile spatial_D.hdf5, outname: spatial_D}]
    - [writefield, {outfpath: !OutputFile spatial_D.pvd}]
#Homogenization
- !HomogFickianSimulator
  name: two_layer.homog
  mesh: !OutputFile two_layer.hdf5
  meshmeta: !OutputFile two_layer.gmsh.yaml
  modules:
    - !InputFile comparator.py
  methods:
    calc_exact: calc_exact
    compare_answers: compare_answers
  metadata:
    D1: 1 #Only needed for comparison to the exact answer
    D2: 2 # ' '
  loaddata:
    - [loadfield, {attrpath: D, infpath: !OutputFile spatial_D.hdf5, fieldtag: spatial_D}]
  conditions:
    elementorder: 3
    boundaries: [1, 2, 3, 4, 5, 7]
  dataextraction:
    - [domain_volume, {attrpath: domain_volume}]
    - [macroscale_diffusion, {volpath: domain_volume}]
    - [calc_exact, {attrpath: expected_answer}]
    - [compare_answers, {summarypath: comparison_ok, diffpath: error_values, expected: !Stored expected_answer, received: !Stored D_macro, difftol: 0.02}]
    - - reportvalues
      - outfpath: !OutputFile results.yaml
        mapping:
          domain_volume: domain_volume
          D_macro: D_macro
          expected_answer: expected_answer
          comparison_ok: comparison_ok
          error_values: error_values
    - - reportvalues
      - outfpath: !OutputFile summary.yaml
        mapping:
          comparison_ok: comparison_ok
#Verify output of previous test
- !FileComparisonRequest
  name: two_layer.verify
  expected: !CompareFile summary.yaml
  received: !OutputFile summary.yaml
